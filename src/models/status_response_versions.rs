/*
 * Cortex API
 *
 * API for Cortex, a powerful observable analysis and active response engine.
 *
 * The version of the OpenAPI document: 3.1.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusResponseVersions {
    #[serde(rename = "Cortex", skip_serializing_if = "Option::is_none")]
    pub cortex: Option<String>,
    #[serde(rename = "Elastic4Play", skip_serializing_if = "Option::is_none")]
    pub elastic4_play: Option<String>,
    #[serde(rename = "Play", skip_serializing_if = "Option::is_none")]
    pub play: Option<String>,
    #[serde(rename = "Elastic4s", skip_serializing_if = "Option::is_none")]
    pub elastic4s: Option<String>,
    #[serde(rename = "ElasticSearch client", skip_serializing_if = "Option::is_none")]
    pub elastic_search_client: Option<String>,
}

impl StatusResponseVersions {
    pub fn new() -> StatusResponseVersions {
        StatusResponseVersions {
            cortex: None,
            elastic4_play: None,
            play: None,
            elastic4s: None,
            elastic_search_client: None,
        }
    }
}

