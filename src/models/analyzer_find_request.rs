/*
 * Cortex API
 *
 * API for Cortex, a powerful observable analysis and active response engine.
 *
 * The version of the OpenAPI document: 3.1.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnalyzerFindRequest {
    /// Elastic4Play Query Definition Language object for searches.
    #[serde(rename = "query", skip_serializing_if = "Option::is_none")]
    pub query: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Pagination range, e.g., \"0-10\".
    #[serde(rename = "range", skip_serializing_if = "Option::is_none")]
    pub range: Option<String>,
    /// Sort order for results. Prefix with '-' for descending.
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<String>>,
}

impl AnalyzerFindRequest {
    pub fn new() -> AnalyzerFindRequest {
        AnalyzerFindRequest {
            query: None,
            range: None,
            sort: None,
        }
    }
}

