/*
 * Cortex API
 *
 * API for Cortex, a powerful observable analysis and active response engine.
 *
 * The version of the OpenAPI document: 3.1.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuthContext : Authentication context for the logged-in user.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthContext {
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    #[serde(rename = "apiKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub api_key: Option<Option<String>>,
}

impl AuthContext {
    /// Authentication context for the logged-in user.
    pub fn new() -> AuthContext {
        AuthContext {
            user_id: None,
            user_name: None,
            roles: None,
            api_key: None,
        }
    }
}

