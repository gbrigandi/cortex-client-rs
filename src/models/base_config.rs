/*
 * Cortex API
 *
 * API for Cortex, a powerful observable analysis and active response engine.
 *
 * The version of the OpenAPI document: 3.1.8
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BaseConfig {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "workers", skip_serializing_if = "Option::is_none")]
    pub workers: Option<Vec<String>>,
    #[serde(rename = "configurationItems", skip_serializing_if = "Option::is_none")]
    pub configuration_items: Option<Vec<models::ConfigurationDefinitionItem>>,
    /// Arbitrary JSON object representing a worker's specific configuration.
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl BaseConfig {
    pub fn new() -> BaseConfig {
        BaseConfig {
            name: None,
            workers: None,
            configuration_items: None,
            config: None,
        }
    }
}

